// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 98350 $
// File generated on 12.11.2020 10:55:05 from Type Library described below.

// ************************************************************************  //
// Type Lib: H:\RADStudioProjects\Evgeny\PluginSystemTest\SDKTypeLib\PluginAPIWrapper.tlb (1)
// LIBID: {59B571B1-F6B7-4198-92AD-7895CBAFBE40}
// LCID: 0
// Helpfile: 
// HelpString: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\System32\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// Cmdline:
//   "H:\RAD\Studio\21\bin64\tlibimp.exe"  -C -P -D"H:\RADStudioProjects\Evgeny\PluginSystemTest\SDK" -Pt -XM "H:\RADStudioProjects\Evgeny\PluginSystemTest\SDKTypeLib\PluginAPIWrapper.tlb"
// ************************************************************************ //
#ifndef   PluginAPI_TLBH
#define   PluginAPI_TLBH

#pragma option push -b -w-inl -w-8118
#pragma pack(push, 4)

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <System.Win.StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Pluginapi_tlb
{

// *********************************************************************//
// HelpString: 
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_PluginAPI;
extern __declspec (package) const GUID IID_IAPIModuleInfo;
extern __declspec (package) const GUID IID_ExceptionHandlerIID;
extern __declspec (package) const GUID IID_IAPIIntfCollection;
extern __declspec (package) const GUID IID_IAPIInitDone;
extern __declspec (package) const GUID IID_IAPIInitDoneModuleEvents;
extern __declspec (package) const GUID IID_IDebugRefCount;
extern __declspec (package) const GUID IID_IAPIEvent;
extern __declspec (package) const GUID IID_IAPICoreEventCollection;
extern __declspec (package) const GUID IID_IAPICoreAppWnds;
extern __declspec (package) const GUID IID_IAPIWeakRef;
extern __declspec (package) const GUID IID_IAPIWeakRefSupport;
extern __declspec (package) const GUID IID_IAPIEventSubscriber;
extern __declspec (package) const GUID IID_IAPICoreWndsCollection;
extern __declspec (package) const GUID IID_IAPICoreUIControlsCollection;
extern __declspec (package) const GUID IID_IAPIWindow;
extern __declspec (package) const GUID GUID_CustomHResults;
extern __declspec (package) const GUID GUID_CustomConsts;
extern __declspec (package) const GUID GUID_ModuleVersionMaskConsts;
extern __declspec (package) const GUID GUID_ModuleInitDoneReasonsConsts;
extern __declspec (package) const GUID GUID_BSTR;
extern __declspec (package) const GUID GUID_PTGUID;
extern __declspec (package) const GUID GUID_LPSTR;
extern __declspec (package) const GUID GUID_LPWSTR;
extern __declspec (package) const GUID GUID_IUnknownWorkaround;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum class    CustomHResults;
enum class    CustomConsts;
enum class    ModuleVersionMaskConsts;
enum class    ModuleInitDoneReasonsConsts;
interface DECLSPEC_UUID("{5A16A90B-E0EE-4AE2-B904-8665387E7C6C}") IAPIModuleInfo;
typedef TComInterface<IAPIModuleInfo, &IID_IAPIModuleInfo> IAPIModuleInfoPtr;

interface DECLSPEC_UUID("{65E7E850-4A23-4C7A-84A0-F2928B9E23CB}") ExceptionHandlerIID;
typedef TComInterface<ExceptionHandlerIID, &IID_ExceptionHandlerIID> ExceptionHandlerIIDPtr;

interface DECLSPEC_UUID("{458979CE-EADD-4EC4-BE70-8EF4086B10DD}") IAPIIntfCollection;
typedef TComInterface<IAPIIntfCollection, &IID_IAPIIntfCollection> IAPIIntfCollectionPtr;

interface DECLSPEC_UUID("{57CAF06D-D28B-4ACE-87E1-FA85E5F760B0}") IAPIInitDone;
typedef TComInterface<IAPIInitDone, &IID_IAPIInitDone> IAPIInitDonePtr;

interface DECLSPEC_UUID("{467BF164-2DB2-4570-8A6B-9F7A825A6A8E}") IAPIInitDoneModuleEvents;
typedef TComInterface<IAPIInitDoneModuleEvents, &IID_IAPIInitDoneModuleEvents> IAPIInitDoneModuleEventsPtr;

interface DECLSPEC_UUID("{BB492DB2-5AAA-45DC-96C3-7147869773E3}") IDebugRefCount;
typedef TComInterface<IDebugRefCount, &IID_IDebugRefCount> IDebugRefCountPtr;

interface DECLSPEC_UUID("{9A2F79C5-7E5C-4DF3-8A34-1990F91A7A33}") IAPIEvent;
typedef TComInterface<IAPIEvent, &IID_IAPIEvent> IAPIEventPtr;

interface DECLSPEC_UUID("{5DC17996-1E2D-496C-A601-5B7FAA14CE19}") IAPICoreEventCollection;
typedef TComInterface<IAPICoreEventCollection, &IID_IAPICoreEventCollection> IAPICoreEventCollectionPtr;

interface DECLSPEC_UUID("{2C99285A-73BC-4514-8C80-DDD65710C0AC}") IAPICoreAppWnds;
typedef TComInterface<IAPICoreAppWnds, &IID_IAPICoreAppWnds> IAPICoreAppWndsPtr;

interface DECLSPEC_UUID("{0BEE6565-C48A-4BE9-B183-80718ED1CF8B}") IAPIWeakRef;
typedef TComInterface<IAPIWeakRef, &IID_IAPIWeakRef> IAPIWeakRefPtr;

interface DECLSPEC_UUID("{D11995B9-9A3F-4CF6-8D6F-303103D0AFEE}") IAPIWeakRefSupport;
typedef TComInterface<IAPIWeakRefSupport, &IID_IAPIWeakRefSupport> IAPIWeakRefSupportPtr;

interface DECLSPEC_UUID("{6B650F8A-9FE6-4BDB-B230-AB382A25E052}") IAPIEventSubscriber;
typedef TComInterface<IAPIEventSubscriber, &IID_IAPIEventSubscriber> IAPIEventSubscriberPtr;

interface DECLSPEC_UUID("{DEFDB06D-E905-4C86-8117-5D302149B5F5}") IAPICoreWndsCollection;
typedef TComInterface<IAPICoreWndsCollection, &IID_IAPICoreWndsCollection> IAPICoreWndsCollectionPtr;

interface DECLSPEC_UUID("{4E504300-853B-47FC-849D-690BA62B935C}") IAPICoreUIControlsCollection;
typedef TComInterface<IAPICoreUIControlsCollection, &IID_IAPICoreUIControlsCollection> IAPICoreUIControlsCollectionPtr;

interface DECLSPEC_UUID("{83AD36D7-878A-442D-B654-4C1A8B113FDE}") IAPIWindow;
typedef TComInterface<IAPIWindow, &IID_IAPIWindow> IAPIWindowPtr;


// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef BSTR BSTR;
typedef System::TGUID* PTGUID;
typedef LPSTR LPSTR;
typedef LPWSTR LPWSTR;
typedef LPUNKNOWN IUnknownWorkaround;
typedef LPUNKNOWN *IUnknownWorkaroundPtr;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
enum class CustomHResults
{
  CustomHResultCodeOffset = 544, 
  E_C_UnregisteredException = 545, 
  E_C_AbstractError = 546, 
  E_C_ArgumentException = 547, 
  E_C_ArgumentNilException = 548, 
  E_C_ArgumentOutOfRangeException = 549, 
  E_C_BitsError = 550, 
  E_C_ClassNotFound = 551, 
  E_C_ComponentError = 552, 
  E_C_ConvertError = 553, 
  E_C_DirectoryNotFoundException = 554, 
  E_C_External = 555, 
  E_C_ExternalException = 556, 
  E_C_FCreateError = 557, 
  E_C_FileNotFoundException = 558, 
  E_C_FilerError = 559, 
  E_C_FileStreamError = 560, 
  E_C_FOpenError = 561, 
  E_C_HeapException = 562, 
  E_C_InOutError = 563, 
  E_C_IntError = 564, 
  E_C_IntfCastError = 565, 
  E_C_InvalidCast = 566, 
  E_C_InvalidContainer = 567, 
  E_C_InvalidImage = 568, 
  E_C_InvalidInsert = 569, 
  E_C_InvalidOperation = 570, 
  E_C_InvalidOpException = 571, 
  E_C_InvalidPointer = 572, 
  E_C_ListError = 573, 
  E_C_MathError = 574, 
  E_C_MethodNotFound = 575, 
  E_C_Monitor = 576, 
  E_C_MonitorLockException = 577, 
  E_C_NoConstructException = 578, 
  E_C_NoMonitorSupportException = 579, 
  E_C_OutOfResources = 580, 
  E_C_PackageError = 581, 
  E_C_ParserError = 582, 
  E_C_PathTooLongException = 583, 
  E_C_ProgrammerNotFound = 584, 
  E_C_PropReadOnly = 585, 
  E_C_PropWriteOnly = 586, 
  E_C_RangeError = 587, 
  E_C_ReadError = 588, 
  E_C_ResNotFound = 589, 
  E_C_StreamError = 590, 
  E_C_StringListError = 591, 
  E_C_VariantError = 592, 
  E_C_WriteError = 593, 
  E_C_BaseCustomException = 594, 
  E_C_CheckedInterfacedObjectError = 595, 
  E_C_CheckedInterfacedObjectDeleteError = 596, 
  E_C_CheckedInterfacedObjectDoubleFreeError = 597, 
  E_C_CheckedInterfacedObjectUseDeletedError = 598, 
  E_C_BaseCustomOleSysError = 599, 
  E_C_PluginAPIError = 600, 
  E_C_PluginAPIIndexOutOfBounds = 601, 
  E_C_PluginAPIInterfaceNotSupported = 602, 
  E_C_PluginAPIInitializeError = 603
};

enum class CustomConsts
{
  cDelphiException = 250477278, 
  CUSTOMER_BIT = 536870912
};

enum class ModuleVersionMaskConsts
{
  cMajorVersionMask = 2130706432, 
  cMinorVersionMask = 16711680, 
  cReleaseVersionMask = 65280, 
  cBuildVersionMask = 255, 
  cVersionMask = 2147483647
};

enum class ModuleInitDoneReasonsConsts
{
  cReasonInitialLoad = 0, 
  cReasonModuleReload = 1, 
  cReasonErrorUnload = 2, 
  cReasonProgramExit = 3, 
  cReasonProgramErrorExit = 4
};

// *********************************************************************//
// Interface: IAPIModuleInfo
// Flags:     (0)
// GUID:      {5A16A90B-E0EE-4AE2-B904-8665387E7C6C}
// *********************************************************************//
interface IAPIModuleInfo  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_ModuleGUID(System::TGUID* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_ModuleVersion(unsigned_long* Value/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE get_ModuleName(BSTR* Value/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_ModuleDescription(BSTR* Value/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE get_ModuleAPIVersion(unsigned_long* Value/*[out,retval]*/) = 0; // [104]
};

// *********************************************************************//
// Interface: ExceptionHandlerIID
// Flags:     (0)
// GUID:      {65E7E850-4A23-4C7A-84A0-F2928B9E23CB}
// *********************************************************************//
interface ExceptionHandlerIID  : public IUnknown
{
public:
};

// *********************************************************************//
// Interface: IAPIIntfCollection
// Flags:     (0)
// GUID:      {458979CE-EADD-4EC4-BE70-8EF4086B10DD}
// *********************************************************************//
interface IAPIIntfCollection  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_IntfCollectionCount(long* Value/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE GetIntfName(long AIndex/*[in]*/, 
                                                BSTR* ReturnName/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE GetIntfByIndex(long AIndex/*[in]*/, 
                                                   Pluginapi_tlb::IUnknownWorkaround* AIntf/*[out]*/, 
                                                   VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE GetIntfByName(BSTR AName/*[in]*/, 
                                                  Pluginapi_tlb::IUnknownWorkaround* AIntf/*[out]*/, 
                                                  VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE GetIntfByGUID(System::TGUID AGUID/*[in]*/, 
                                                  Pluginapi_tlb::IUnknownWorkaround* AIntf/*[out]*/, 
                                                  VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE GetIntfByIndexWeak(long AIndex/*[in]*/, 
                                                       Pluginapi_tlb::IAPIWeakRef* AIntf/*[out]*/, 
                                                       VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE GetIntfByNameWeak(BSTR AName/*[in]*/, 
                                                      Pluginapi_tlb::IAPIWeakRef* AIntf/*[out]*/, 
                                                      VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE GetIntfByGUIDWeak(System::TGUID AGUID/*[in]*/, 
                                                      Pluginapi_tlb::IAPIWeakRef* AIntf/*[out]*/, 
                                                      VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [108]
};

// *********************************************************************//
// Interface: IAPIInitDone
// Flags:     (0)
// GUID:      {57CAF06D-D28B-4ACE-87E1-FA85E5F760B0}
// *********************************************************************//
interface IAPIInitDone  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE Initialize(LPUNKNOWN ACoreIntf/*[in]*/, long AReason/*[in]*/, 
                                               VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE Finalize(LPUNKNOWN ACoreIntf/*[in]*/, long AReason/*[in]*/) = 0; // [102]
};

// *********************************************************************//
// Interface: IAPIInitDoneModuleEvents
// Flags:     (0)
// GUID:      {467BF164-2DB2-4570-8A6B-9F7A825A6A8E}
// *********************************************************************//
interface IAPIInitDoneModuleEvents  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE AfterPluginsInitialize(long AReason/*[in]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE BeforePluginsFinalize(long AReason/*[in]*/) = 0; // [102]
};

// *********************************************************************//
// Interface: IDebugRefCount
// Flags:     (0)
// GUID:      {BB492DB2-5AAA-45DC-96C3-7147869773E3}
// *********************************************************************//
interface IDebugRefCount  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetDebugRefCount(long* ReturnValue/*[out,retval]*/) = 0; // [201]
};

// *********************************************************************//
// Interface: IAPIEvent
// Flags:     (0)
// GUID:      {9A2F79C5-7E5C-4DF3-8A34-1990F91A7A33}
// *********************************************************************//
interface IAPIEvent  : public IUnknown
{
public:
  // [101] Test event
  virtual HRESULT STDMETHODCALLTYPE FireEvent(BSTR AParam/*[in]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE Subscribe(Pluginapi_tlb::IAPIEventSubscriber* ASubscriber/*[in,out]*/, 
                                              BSTR ASubscriberDescription/*[in]*/, 
                                              VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE Unsubscribe(Pluginapi_tlb::IAPIEventSubscriber* ASubscriber/*[in,out]*/, 
                                                VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE UnsubscribeAll(VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE get_EventSubscribersCount(long* Value/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE GetSubscribersDescriptions(BSTR* AReturnDescriptions/*[out,retval]*/) = 0; // [106]
};

// *********************************************************************//
// Interface: IAPICoreEventCollection
// Flags:     (0)
// GUID:      {5DC17996-1E2D-496C-A601-5B7FAA14CE19}
// *********************************************************************//
interface IAPICoreEventCollection  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE RegisterEvent(System::TGUID AModule/*[in]*/, 
                                                  BSTR AEventName/*[in]*/, 
                                                  Pluginapi_tlb::IAPIEvent* AEvent/*[in]*/, 
                                                  long* ReturnID/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE UnregisterEvent(long AID/*[in]*/, 
                                                    VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE get_EventCollectionCount(long* Value/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE GetEventName(long AIndex/*[in]*/, BSTR* AName/*[out]*/, 
                                                 VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE GetEventModule(long AIndex/*[in]*/, 
                                                   System::TGUID* AModule/*[out]*/, 
                                                   VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE GetEventByIndex(long AIndex/*[in]*/, 
                                                    Pluginapi_tlb::IAPIEvent* AEvent/*[out]*/, 
                                                    VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE GetEventByID(long AID/*[in]*/, 
                                                 Pluginapi_tlb::IAPIEvent* AEvent/*[out]*/, 
                                                 VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE GetEventByIndexWeak(long AIndex/*[in]*/, 
                                                        Pluginapi_tlb::IAPIWeakRef* AEvent/*[out]*/, 
                                                        VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE GetEventByIDWeak(long AID/*[in]*/, 
                                                     Pluginapi_tlb::IAPIWeakRef* AEvent/*[out]*/, 
                                                     VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [109]
};

// *********************************************************************//
// Interface: IAPICoreAppWnds
// Flags:     (0)
// GUID:      {2C99285A-73BC-4514-8C80-DDD65710C0AC}
// *********************************************************************//
interface IAPICoreAppWnds  : public IUnknown
{
public:
  // [101] Type: HWND
  virtual HRESULT STDMETHODCALLTYPE get_ApplicationWnd(void** Value/*[out,retval]*/) = 0;
  // [102] Type: HWND
  virtual HRESULT STDMETHODCALLTYPE get_MainWnd(void** Value/*[out,retval]*/) = 0;
  // [103] Type: HWND
  virtual HRESULT STDMETHODCALLTYPE get_ActiveWnd(void** Value/*[out,retval]*/) = 0;
  // [104] Type: HWND
  virtual HRESULT STDMETHODCALLTYPE get_MDIClientWnd(void** Value/*[out,retval]*/) = 0;
  virtual HRESULT STDMETHODCALLTYPE ModalStart(void) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE ModalFinish(void) = 0; // [106]
};

// *********************************************************************//
// Interface: IAPIWeakRef
// Flags:     (0)
// GUID:      {0BEE6565-C48A-4BE9-B183-80718ED1CF8B}
// *********************************************************************//
interface IAPIWeakRef  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE IsWeakRefAlive(VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE GetRef(Pluginapi_tlb::IUnknownWorkaround* Referance/*[out]*/, 
                                           VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [102]
};

// *********************************************************************//
// Interface: IAPIWeakRefSupport
// Flags:     (0)
// GUID:      {D11995B9-9A3F-4CF6-8D6F-303103D0AFEE}
// *********************************************************************//
interface IAPIWeakRefSupport  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE GetWeakRef(Pluginapi_tlb::IAPIWeakRef* ReturnValue/*[out]*/) = 0; // [101]
};

// *********************************************************************//
// Interface: IAPIEventSubscriber
// Flags:     (0)
// GUID:      {6B650F8A-9FE6-4BDB-B230-AB382A25E052}
// *********************************************************************//
interface IAPIEventSubscriber  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE EventFired(BSTR AParameter/*[in]*/) = 0; // [101]
};

// *********************************************************************//
// Interface: IAPICoreWndsCollection
// Flags:     (0)
// GUID:      {DEFDB06D-E905-4C86-8117-5D302149B5F5}
// *********************************************************************//
interface IAPICoreWndsCollection  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_WndsCollectionCount(long* Value/*[out,retval]*/) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE RegisterWindow(System::TGUID AModule/*[in]*/, 
                                                   BSTR AWindowName/*[in]*/, 
                                                   Pluginapi_tlb::IAPIWindow* AWindow/*[in]*/, 
                                                   long* ReturnID/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE UnregisterWindow(long AID/*[in]*/, 
                                                     VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [103]
  virtual HRESULT STDMETHODCALLTYPE GetWindowName(long AIndex/*[in]*/, BSTR* AName/*[out]*/, 
                                                  VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [104]
  virtual HRESULT STDMETHODCALLTYPE GetWindowModule(long AIndex/*[in]*/, 
                                                    System::TGUID* AModule/*[out]*/, 
                                                    VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [105]
  virtual HRESULT STDMETHODCALLTYPE GetWindowByIndex(long AIndex/*[in]*/, 
                                                     Pluginapi_tlb::IAPIWindow* AWindow/*[out]*/, 
                                                     VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [106]
  virtual HRESULT STDMETHODCALLTYPE GetWindowByID(long AID/*[in]*/, 
                                                  Pluginapi_tlb::IAPIWindow* AWindow/*[out]*/, 
                                                  VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [107]
  virtual HRESULT STDMETHODCALLTYPE GetWindowByIndexWeak(long AIndex/*[in]*/, 
                                                         Pluginapi_tlb::IAPIWeakRef* AWindow/*[out]*/, 
                                                         VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [108]
  virtual HRESULT STDMETHODCALLTYPE GetWindowByIDWeak(long AID/*[in]*/, 
                                                      Pluginapi_tlb::IAPIWeakRef* AWindow/*[out]*/, 
                                                      VARIANT_BOOL* ReturnValue/*[out,retval]*/) = 0; // [109]
};

// *********************************************************************//
// Interface: IAPICoreUIControlsCollection
// Flags:     (0)
// GUID:      {4E504300-853B-47FC-849D-690BA62B935C}
// *********************************************************************//
interface IAPICoreUIControlsCollection  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_UIControlsCollectionCount(long* Value/*[out,retval]*/) = 0; // [101]
};

// *********************************************************************//
// Interface: IAPIWindow
// Flags:     (0)
// GUID:      {83AD36D7-878A-442D-B654-4C1A8B113FDE}
// *********************************************************************//
interface IAPIWindow  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE ShowWindow(void) = 0; // [101]
  virtual HRESULT STDMETHODCALLTYPE ShowModalWindow(long* ReturnValue/*[out,retval]*/) = 0; // [102]
  virtual HRESULT STDMETHODCALLTYPE CloseWindow(void) = 0; // [103]
};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
typedef TComInterface<IAPIModuleInfo>  TCOMIAPIModuleInfo;

typedef TComInterface<ExceptionHandlerIID>  TCOMExceptionHandlerIID;

typedef TComInterface<IAPIIntfCollection>  TCOMIAPIIntfCollection;

typedef TComInterface<IAPIInitDone>  TCOMIAPIInitDone;

typedef TComInterface<IAPIInitDoneModuleEvents>  TCOMIAPIInitDoneModuleEvents;

typedef TComInterface<IDebugRefCount>  TCOMIDebugRefCount;

typedef TComInterface<IAPIEvent>  TCOMIAPIEvent;

typedef TComInterface<IAPICoreEventCollection>  TCOMIAPICoreEventCollection;

typedef TComInterface<IAPICoreAppWnds>  TCOMIAPICoreAppWnds;

typedef TComInterface<IAPIWeakRef>  TCOMIAPIWeakRef;

typedef TComInterface<IAPIWeakRefSupport>  TCOMIAPIWeakRefSupport;

typedef TComInterface<IAPIEventSubscriber>  TCOMIAPIEventSubscriber;

typedef TComInterface<IAPICoreWndsCollection>  TCOMIAPICoreWndsCollection;

typedef TComInterface<IAPICoreUIControlsCollection>  TCOMIAPICoreUIControlsCollection;

typedef TComInterface<IAPIWindow>  TCOMIAPIWindow;

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Pluginapi_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Pluginapi_tlb;
#endif

#pragma pack(pop)
#pragma option pop

#endif // PluginAPI_TLBH
