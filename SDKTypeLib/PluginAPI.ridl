// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Library Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 30.10.2020 11:02:05 (- $Rev: 12980 $, 2885545296).

[
  uuid(59B571B1-F6B7-4198-92AD-7895CBAFBE40),
  version(1.0)

]
library PluginAPI
{

  importlib("stdole2.tlb");

  interface IAPIModuleInfo;
  interface ExceptionHandlerIID;
  interface IAPIIntfCollection;
  interface IAPIInitDone;
  interface IAPIInitDoneModuleEvents;
  interface IDebugRefCount;
  interface IAPIEvent;
  interface IAPICoreEventCollection;
  interface IAPICoreAppWnds;
  interface IAPIWeakRef;
  interface IAPIWeakRefSupport;
  interface IAPIEventSubscriber;
  interface IAPICoreWndsCollection;
  interface IAPICoreUIControlsCollection;
  interface IAPIWindow;


  [
    uuid(45EE270C-DB9A-4267-BD51-694F19926972)
  ]
  enum CustomHResults
  {
    CustomHResultCodeOffset = 544,
    E_C_UnregisteredException = 545,
    E_C_AbstractError = 546,
    E_C_ArgumentException = 547,
    E_C_ArgumentNilException = 548,
    E_C_ArgumentOutOfRangeException = 549,
    E_C_BitsError = 550,
    E_C_ClassNotFound = 551,
    E_C_ComponentError = 552,
    E_C_ConvertError = 553,
    E_C_DirectoryNotFoundException = 554,
    E_C_External = 555,
    E_C_ExternalException = 556,
    E_C_FCreateError = 557,
    E_C_FileNotFoundException = 558,
    E_C_FilerError = 559,
    E_C_FileStreamError = 560,
    E_C_FOpenError = 561,
    E_C_HeapException = 562,
    E_C_InOutError = 563,
    E_C_IntError = 564,
    E_C_IntfCastError = 565,
    E_C_InvalidCast = 566,
    E_C_InvalidContainer = 567,
    E_C_InvalidImage = 568,
    E_C_InvalidInsert = 569,
    E_C_InvalidOperation = 570,
    E_C_InvalidOpException = 571,
    E_C_InvalidPointer = 572,
    E_C_ListError = 573,
    E_C_MathError = 574,
    E_C_MethodNotFound = 575,
    E_C_Monitor = 576,
    E_C_MonitorLockException = 577,
    E_C_NoConstructException = 578,
    E_C_NoMonitorSupportException = 579,
    E_C_OutOfResources = 580,
    E_C_PackageError = 581,
    E_C_ParserError = 582,
    E_C_PathTooLongException = 583,
    E_C_ProgrammerNotFound = 584,
    E_C_PropReadOnly = 585,
    E_C_PropWriteOnly = 586,
    E_C_RangeError = 587,
    E_C_ReadError = 588,
    E_C_ResNotFound = 589,
    E_C_StreamError = 590,
    E_C_StringListError = 591,
    E_C_VariantError = 592,
    E_C_WriteError = 593,
    E_C_BaseCustomException = 594,
    E_C_CheckedInterfacedObjectError = 595,
    E_C_CheckedInterfacedObjectDeleteError = 596,
    E_C_CheckedInterfacedObjectDoubleFreeError = 597,
    E_C_CheckedInterfacedObjectUseDeletedError = 598,
    E_C_BaseCustomOleSysError = 599,
    E_C_PluginAPIError = 600,
    E_C_PluginAPIIndexOutOfBounds = 601,
    E_C_PluginAPIInterfaceNotSupported = 602,
    E_C_PluginAPIInitializeError = 603
  };

  [
    uuid(74B7991C-A98C-4CBE-A7E9-1A85C6B925B5)
  ]
  enum CustomConsts
  {
    cDelphiException = 250477278,
    CUSTOMER_BIT = 536870912
  };

  [
    uuid(F9B9B7C4-69B7-4470-ADDB-48140DBA8C5D)
  ]
  enum ModuleVersionMaskConsts
  {
    cMajorVersionMask = 2130706432,
    cMinorVersionMask = 16711680,
    cReleaseVersionMask = 65280,
    cBuildVersionMask = 255,
    cVersionMask = 2147483647
  };

  [
    uuid(00980BFF-97BE-4D02-AF8D-2D7ABF50B367)
  ]
  enum ModuleInitDoneReasonsConsts
  {
    cReasonInitialLoad = 0,
    cReasonModuleReload = 1,
    cReasonErrorUnload = 2,
    cReasonProgramExit = 3,
    cReasonProgramErrorExit = 4
  };

  [
    uuid(C9147A5B-B23D-4D93-9F9E-BD2CB02A23B8),
    public
  ]
  typedef BSTR BSTR;

  [
    uuid(843B574B-4CA2-499B-9565-AF1C7E7F61F1),
    public
  ]
  typedef struct GUID* PTGUID;

  [
    uuid(B4ABC25C-CD33-4B2F-A51C-2163D41983A0),
    public
  ]
  typedef LPSTR LPSTR;

  [
    uuid(4213170D-D17F-48CF-BE49-2D5035F086AC),
    public
  ]
  typedef LPWSTR LPWSTR;

  [
    uuid(BDF3BB10-2159-438C-9989-23FDB49C9C60),
    public
  ]
  typedef  IUnknown* IUnknownWorkaround;

  [
    uuid(5A16A90B-E0EE-4AE2-B904-8665387E7C6C)
  ]
  interface IAPIModuleInfo: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall ModuleGUID([out, retval] struct GUID* Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall ModuleVersion([out, retval] unsigned long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ModuleName([out, retval] BSTR* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ModuleDescription([out, retval] BSTR* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ModuleAPIVersion([out, retval] unsigned long* Value);
  };

  [
    uuid(65E7E850-4A23-4C7A-84A0-F2928B9E23CB)
  ]
  interface ExceptionHandlerIID: IUnknown
  {
  };

  [
    uuid(458979CE-EADD-4EC4-BE70-8EF4086B10DD)
  ]
  interface IAPIIntfCollection: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall IntfCollectionCount([out, retval] long* Value);
    [id(0x00000066)]
    HRESULT _stdcall GetIntfName([in] long AIndex, [out, retval] BSTR* ReturnName);
    [id(0x00000067)]
    HRESULT _stdcall GetIntfByIndex([in] long AIndex, [out] IUnknownWorkaround* AIntf, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x00000068)]
    HRESULT _stdcall GetIntfByName([in] BSTR AName, [out] IUnknownWorkaround* AIntf, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x00000069)]
    HRESULT _stdcall GetIntfByGUID([in] struct GUID AGUID, [out] IUnknownWorkaround* AIntf, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x0000006A)]
    HRESULT _stdcall GetIntfByIndexWeak([in] long AIndex, [out] IAPIWeakRef* AIntf, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x0000006B)]
    HRESULT _stdcall GetIntfByNameWeak([in] BSTR AName, [out] IAPIWeakRef* AIntf, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x0000006C)]
    HRESULT _stdcall GetIntfByGUIDWeak([in] struct GUID AGUID, [out] IAPIWeakRef* AIntf, [out, retval] VARIANT_BOOL* ReturnValue);
  };

  [
    uuid(57CAF06D-D28B-4ACE-87E1-FA85E5F760B0)
  ]
  interface IAPIInitDone: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall Initialize([in]  IUnknown* ACoreIntf, [in] long AReason, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x00000066)]
    HRESULT _stdcall Finalize([in]  IUnknown* ACoreIntf, [in] long AReason);
  };

  [
    uuid(467BF164-2DB2-4570-8A6B-9F7A825A6A8E)
  ]
  interface IAPIInitDoneModuleEvents: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall AfterPluginsInitialize([in] long AReason);
    [id(0x00000066)]
    HRESULT _stdcall BeforePluginsFinalize([in] long AReason);
  };

  [
    uuid(BB492DB2-5AAA-45DC-96C3-7147869773E3)
  ]
  interface IDebugRefCount: IUnknown
  {
    [id(0x000000C9)]
    HRESULT _stdcall GetDebugRefCount([out, retval] long* ReturnValue);
  };

  [
    uuid(9A2F79C5-7E5C-4DF3-8A34-1990F91A7A33)
  ]
  interface IAPIEvent: IUnknown
  {
    [id(0x00000065), helpstring("Test event")]
    HRESULT _stdcall FireEvent([in] BSTR AParam);
    [id(0x00000066)]
    HRESULT _stdcall Subscribe([in, out] IAPIEventSubscriber* ASubscriber, [in] BSTR ASubscriberDescription, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x00000067)]
    HRESULT _stdcall Unsubscribe([in, out] IAPIEventSubscriber* ASubscriber, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x00000068)]
    HRESULT _stdcall UnsubscribeAll([out, retval] VARIANT_BOOL* ReturnValue);
    [propget, id(0x00000069)]
    HRESULT _stdcall EventSubscribersCount([out, retval] long* Value);
    [id(0x0000006A)]
    HRESULT _stdcall GetSubscribersDescriptions([out, retval] BSTR* AReturnDescriptions);
  };

  [
    uuid(5DC17996-1E2D-496C-A601-5B7FAA14CE19)
  ]
  interface IAPICoreEventCollection: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall RegisterEvent([in] struct GUID AModule, [in] BSTR AEventName, [in] IAPIEvent* AEvent, [out, retval] long* ReturnID);
    [id(0x00000066)]
    HRESULT _stdcall UnregisterEvent([in] long AID, [out, retval] VARIANT_BOOL* ReturnValue);
    [propget, id(0x00000067)]
    HRESULT _stdcall EventCollectionCount([out, retval] long* Value);
    [id(0x00000068)]
    HRESULT _stdcall GetEventName([in] long AIndex, [out] BSTR* AName, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x00000069)]
    HRESULT _stdcall GetEventModule([in] long Aindex, [out] struct GUID* AModule, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x0000006A)]
    HRESULT _stdcall GetEventByIndex([in] long AIndex, [out] IAPIEvent* AEvent, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x0000006B)]
    HRESULT _stdcall GetEventByID([in] long AID, [out] IAPIEvent* AEvent, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x0000006C)]
    HRESULT _stdcall GetEventByIndexWeak([in] long AIndex, [out] IAPIWeakRef* AEvent, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x0000006D)]
    HRESULT _stdcall GetEventByIDWeak([in] long AID, [out] IAPIWeakRef* AEvent, [out, retval] VARIANT_BOOL* ReturnValue);
  };

  [
    uuid(2C99285A-73BC-4514-8C80-DDD65710C0AC)
  ]
  interface IAPICoreAppWnds: IUnknown
  {
    [propget, id(0x00000065), helpstring("Type: HWND")]
    HRESULT _stdcall ApplicationWnd([out, retval] void** Value);
    [propget, id(0x00000066), helpstring("Type: HWND")]
    HRESULT _stdcall MainWnd([out, retval] void** Value);
    [propget, id(0x00000067), helpstring("Type: HWND")]
    HRESULT _stdcall ActiveWnd([out, retval] void** Value);
    [propget, id(0x00000068), helpstring("Type: HWND")]
    HRESULT _stdcall MDIClientWnd([out, retval] void** Value);
    [id(0x00000069)]
    HRESULT _stdcall ModalStart(void);
    [id(0x0000006A)]
    HRESULT _stdcall ModalFinish(void);
  };

  [
    uuid(0BEE6565-C48A-4BE9-B183-80718ED1CF8B)
  ]
  interface IAPIWeakRef: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall IsWeakRefAlive([out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x00000066)]
    HRESULT _stdcall GetRef([out] IUnknownWorkaround* Referance, [out, retval] VARIANT_BOOL* ReturnValue);
  };

  [
    uuid(D11995B9-9A3F-4CF6-8D6F-303103D0AFEE)
  ]
  interface IAPIWeakRefSupport: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall GetWeakRef([out] IAPIWeakRef* ReturnValue);
  };

  [
    uuid(6B650F8A-9FE6-4BDB-B230-AB382A25E052)
  ]
  interface IAPIEventSubscriber: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall EventFired([in] BSTR AParameter);
  };

  [
    uuid(DEFDB06D-E905-4C86-8117-5D302149B5F5)
  ]
  interface IAPICoreWndsCollection: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall WndsCollectionCount([out, retval] long* Value);
    [id(0x00000066)]
    HRESULT _stdcall RegisterWindow([in] struct GUID AModule, [in] BSTR AWindowName, [in] IAPIWindow* AWindow, [out, retval] long* ReturnID);
    [id(0x00000067)]
    HRESULT _stdcall UnregisterWindow([in] long AID, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x00000068)]
    HRESULT _stdcall GetWindowName([in] long AIndex, [out] BSTR* AName, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x00000069)]
    HRESULT _stdcall GetWindowModule([in] long AIndex, [out] struct GUID* AModule, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x0000006A)]
    HRESULT _stdcall GetWindowByIndex([in] long AIndex, [out] IAPIWindow* AWindow, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x0000006B)]
    HRESULT _stdcall GetWindowByID([in] long AID, [out] IAPIWindow* AWindow, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x0000006C)]
    HRESULT _stdcall GetWindowByIndexWeak([in] long AIndex, [out] IAPIWeakRef* AWindow, [out, retval] VARIANT_BOOL* ReturnValue);
    [id(0x0000006D)]
    HRESULT _stdcall GetWindowByIDWeak([in] long AID, [out] IAPIWeakRef* AWindow, [out, retval] VARIANT_BOOL* ReturnValue);
  };

  [
    uuid(4E504300-853B-47FC-849D-690BA62B935C)
  ]
  interface IAPICoreUIControlsCollection: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall UIControlsCollectionCount([out, retval] long* Value);
  };

  [
    uuid(83AD36D7-878A-442D-B654-4C1A8B113FDE)
  ]
  interface IAPIWindow: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall ShowWindow(void);
    [id(0x00000066)]
    HRESULT _stdcall ShowModalWindow([out, retval] long* ReturnValue);
    [id(0x00000067)]
    HRESULT _stdcall CloseWindow(void);
  };

};
